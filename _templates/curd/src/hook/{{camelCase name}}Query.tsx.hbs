import type { UseQueryOptions } from 'react-query'
import { useQuery } from 'react-query'
import type { BaseOptionType } from 'antd/es/select'
import api from '@/api'
import { DEFAULT_STABLE_TIME } from '@/constants/cache'
import convert from '@/utils/convert'

export function use{{pascalCase name}}Query(options?: Omit<UseQueryOptions<API.{{pascalCase name}}VO[], undefined, API.{{pascalCase name}}VO[], string[]>, 'queryKey'> | undefined) {
  return useQuery(['{{camelCase module.name}}', '{{camelCase name}}'], {
    queryFn: async () => api.{{camelCase name}}.list({}),
    staleTime: DEFAULT_STABLE_TIME,
    ...options,
  })
}

export function use{{pascalCase name}}Options(options?: Omit<UseQueryOptions<API.{{pascalCase name}}VO[], undefined, API.{{pascalCase name}}VO[], string[]>, 'queryKey'> | undefined) {
  const { data: {{camelCase name}}s, refetch } = use{{pascalCase name}}Query(options)

  const convertOptions = (data?: any[]): BaseOptionType[] => {
    return convert.convertOptions(data, { label: it => it.id, value: 'id' })
  }

  return {
    options: convertOptions({{camelCase name}}s),
    async request(params?: any) {
      return convertOptions((await refetch(params)).data)
    },
  }
}

export function use{{pascalCase name}}Enums(options?: Omit<UseQueryOptions<API.{{pascalCase name}}VO[], undefined, API.{{pascalCase name}}VO[], string[]>, 'queryKey'> | undefined) {
  const { data: {{camelCase name}}s, refetch } = use{{pascalCase name}}Query(options)

  const convertEnums = (data: any[] = []): Record<any, any> => {
    return convert.convertEnums(data, { label: it => it.id, value: 'id' })
  }

  return {
    enums: convertEnums({{camelCase name}}s),
    async request(params?: any) {
      return convertEnums((await refetch(params)).data)
    },
  }
}
